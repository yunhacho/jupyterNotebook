diamonds
library(ggplot2)
diamonds
diamonds
library(ggplot2)
diamonds
install.packages("ggplot2")
library(ggplot2)
diamonds
#열(column) 추출
diamonds[,2] # vector
diamonds[,2,drop=FALSE] # dataframe
diamonds$table
diamonds$table = NA
diamonds$table
diamonds$table = NULL
diamonds$table
for(i in 1:10){
cat("Hello",i, "\n")
}
cat("Hello",i, "\n", sep = '')
for(i in 1:10){
cat("Hello",i, "\n", sep = '')
}
library(ggplot2)
diamonds
ggplot2$
###################################################################
#열(column) 추출
diamonds[,2] # vector
#열(column) 추출
diamonds[,2] # vector
diamonds[,2,drop=FALSE] # dataframe
diamonds[,c(2,3,7)] # 2,3,7
diamonds[, 7:10] # 7,8,9,10
View(diamonds)
seq(from=2, to=10, by=2)
diamonds[, seq(from=2, to=10, by=2)] #2, 4, 6, 8, 10
diamonds[,"cut"] #cut이라는 변수명을 가진 column을 추출
colnames(diamonds)
seq(2, 10 ,2)#2, 4, 6, 8, 10
#2, 4, 6, 8, 10
diamonds[,c("cut", "color")] #cut이라는 변수명을 가진 column을 추출
cut = "carat"
#2, 4, 6, 8, 10
diamonds[,c(cut, "color")] #cut이라는 변수명을 가진 column을 추출
#2, 4, 6, 8, 10
diamonds[,c(carot, "color")] #cut이라는 변수명을 가진 column을 추출
colnames(diamonds)
grep("^c",colnames(diamonds))
diamonds[,grep("$c",colnames(diamonds))] #c로 끝나는 column 포함
?grep()
diamonds[,grep("$E",colnames(diamonds))] #c로 끝나는 column 포함
diamonds[,grep("$E",colnames(diamonds))] #c로 끝나는 column 포함
diamonds[,grep("$e",colnames(diamonds))] #c로 끝나는 column 포함
diamonds[,grep("e$",colnames(diamonds))] #c로 끝나는 column 포함
diamonds$cut
#행(row) 추출
diamonds[diamonds$cut == c("Fair", "Ideal"),]
#행(row) 추출
diamonds[diamonds$cut = c("Fair", "Ideal"),]
library(ggplot2)
diamonds[,c("x","y","z")]
diamonds$xyz.sum = rowSums(diamonds[,c("x","y","z")])
View(diamonds)
diamonds[diamonds$price >= 18000, "price"] = 18000
length(diamonds)
nrow(diamonds)
diamonds$table
diamonds$table = NA
diamonds$table
diamonds$table = NULL
diamonds$table
library(ggplot2)
#1~10까지 누적합 구하기(cummlative sum by for) : for (var in seq) { expression }
y <- 0
for(i in 1:10) {
y = y + i
cat("누적합 from 0 to ", i, " is ", y, "\n", sep="")
}
r <- rep(0,9)
df <- NULL
df <- data.frame('one'=r, 'two'=r,'three'=r, 'four'=r, 'five'=r,'six'=r,
'seven'=r, 'eight'=r,'nine'=r)
df
for(i in 1:9){
for(j in 1:9){
df[j,i] = i*j
}
}
df
library(ggplot2)
diamonds[order(diamonds$price),]
#"Hello, World!" 라는 문장을 10번 출력
for (i in 1:10){
print("Hello, world!")
}
for(i in 1:10){
cat("Hello",i, "\n")
}
for(i in 1:10){
cat("Hello",i)
}
for(i in 1:10){
paste("Hello",i)
}
for(i in 1:10){
cat("Hello",i, "\n")
}
for(i in c('a','b', 'c')){
cat("Hello",i, "\n")
}
for(m in 1:9){
for(j in 1:9){
result = j*m
print(result)
}
}
library(ggplot2)
table(diamonds$cut)
table(diamonds$color)
table(diamonds$clarity)
sort(table(diamonds$cut),decreasing=TRUE)
sort(table(diamonds$color),decreasing=TRUE)
sort(table(diamonds$clarity),decreasing=TRUE)
prop.table(table(diamonds$cut))*100
prop.table(table(diamonds$color))*100
prop.table(table(diamonds$clarity))*100
mode(prop.table(table(diamonds$clarity))*100)
round(prop.table(table(diamonds$cut))*100, digits=1)
round(prop.table(table(diamonds$color))*100, digits=1)
round(prop.table(table(diamonds$clarity))*100, digits=1)
install.packages("prettyR")
library(prettyR)
freq(diamonds$cut)
# 결측치를 출력되지 않도록 하려면 diplay.na=FALSE 입력
freq(diamonds$cut, display.na = FALSE)
library(ggplot2)
barplot(table(diamonds$cut))
#막대색깔 변경, 그래프 제목 및 y축 제목 추가
barplot(table(diamonds$cut), col="yellow", main="다이아몬드의 품질 현황", ylab="빈도")
#막대그래프의 y축 눈금 추가
#ylim: y축의 최소값과 최대값을 수정하는 argument
#최소값과 최대값이라는 두 개의 수치형을 지정하기 때문에 c()함수를 사용함.
barplot(table(diamonds$cut), col="yellow", main="다이아몬드의 품질 현황", ylab="빈도",
ylim=c(0,250000))
#가로 막대그래프로 변경하기
barplot(table(diamonds$cut), col="yellow", main="다이아몬드의 품질 현황", ylab="빈도",
horiz=TRUE)
pie(table(diamonds$cut))
#반지름 최대
pie(table(diamonds$cut),radius=1)
#원조각의 처음 시작 각도를 -30으로 지정
pie(table(diamonds$cut),radius=1,init.angle = -30)
library(ggplot2)
diamonds$gprice = cut(diamonds$price, breaks=c(0, 5000, 10000, 15000, 20000))
View(diamonds)
View(diamonds)
View(diamonds)
seq(to=20000, by=5000)
hist(diamonds$price)
#사용자가 지정한 구간의 히스토그램
hist(diamonds$price,breaks=c(0, 5000, 10000, 15000, 20000))
#사용자가 지정한 구간의 갯수를 반영한 히스토그램
hist(diamonds$price,breaks=10)
mean(diamonds$price)
#결측치가 있는 경우
mean(diamonds$price, na.rm=TRUE)
#5% 절삭평균
mean(diamonds$price, tirm=0.05)
#중위수
#양적 자료를 정렬한 후에 데이터 개수를 반으로 나누게 하는 값, 자료의 중심을 알려줌
median(diamonds$price)
Mode(diamonds$price)
#range() 함수
range(diamonds$price)  #최솟값 최댓값 순으로 print
#diff() 함수
#diff(c(A,B)), B-A 시행
diff(c(3,12))
#범위를 구해주기 위해선 range()함수와 diff()함수를 혼용해줘야함
diff(range(diamonds$price))
#사분위 범위(IQR: Inter Quartilel Range)
#제3 사분위수 - 제1 사분위 수
IQR(diamonds$price)
#분산(Variance)
var(diamonds$carat)
#표준편차(standard Deviation)
sd(diamonds$price)
#중위수 절대편차(MAD:Median Absolute Deviation)
mad(diamonds$price)
library(corrplot)
cor.result = cor(diamonds[ ,c("x","y","z")])
corrplot(cor.result, method="circle")
corrplot(cor.result, method="square")
corrplot(cor.result, method="ellipse")
corrplot(cor.result, method="number")
corrplot(cor.result, method="shade")
corrplot(cor.result, method="color")
corrplot(cor.result, method="pie")
corrplot(cor.result, type="full")
corrplot(cor.result, type="upper")
corrplot(cor.result, type="lower")
View(cor.result)
table(diamonds$cut)
table(diamonds$color)
table(diamonds$clarity)
sort(table(diamonds$cut),decreasing=TRUE)
sort(table(diamonds$color),decreasing=TRUE)
sort(table(diamonds$clarity),decreasing=TRUE)
prop.table(table(diamonds$cut))*100
prop.table(diamonds$cut)*100
prop.table(table(diamonds$color))*100
round(prop.table(table(diamonds$cut))*100, digits=1)
?prettyR
?prettyR
??prettyR
freq(diamonds$cut)
library(ggplot2)
barplot(table(diamonds$cut))
#막대색깔 변경, 그래프 제목 및 y축 제목 추가
barplot(table(diamonds$cut), col="yellow", main="다이아몬드의 품질 현황", ylab="빈도")
#막대그래프의 y축 눈금 추가
#ylim: y축의 최소값과 최대값을 수정하는 argument
#최소값과 최대값이라는 두 개의 수치형을 지정하기 때문에 c()함수를 사용함.
barplot(table(diamonds$cut), col="yellow", main="다이아몬드의 품질 현황", ylab="빈도",
ylim=c(0,250000))
#가로 막대그래프로 변경하기
barplot(table(diamonds$cut), col="yellow", main="다이아몬드의 품질 현황", ylab="빈도",
horiz=TRUE)
pie(table(diamonds$cut))
#반지름 최대
pie(table(diamonds$cut),radius=1)
#반지름 최대
pie(table(diamonds$cut),radius=3)
#반지름 최대
pie(table(diamonds$cut),radius=2)
#반지름 최대
pie(table(diamonds$cut),radius=1)
#원조각의 처음 시작 각도를 -30으로 지정
pie(table(diamonds$cut),radius=1,init.angle = -30)
#반지름 최대
pie(table(diamonds$cut),radius=1)
#원조각의 처음 시작 각도를 -30으로 지정
pie(table(diamonds$cut),radius=1,init.angle = -360)
#원조각의 처음 시작 각도를 -30으로 지정
pie(table(diamonds$cut),radius=1,init.angle = -30)
diamonds$gprice = cut(diamonds$price, breaks=c(0, 5000, 10000, 15000, 20000))
View(diamonds)
hist(diamonds$price)
#사용자가 지정한 구간의 히스토그램
hist(diamonds$price,breaks=c(0, 5000, 10000, 15000, 20000))
#사용자가 지정한 구간의 갯수를 반영한 히스토그램
hist(diamonds$price,breaks=10)
a = c(1, 2, 3, NA)
mean(a)
mean(a, na.rm = T)
#결측치가 있는 경우
mean.geometric(diamonds$price, na.rm=TRUE)
library(PerformanceAnalytics)
#5% 절삭평균
mean(diamonds$price, tirm=0.05)
#중위수
#양적 자료를 정렬한 후에 데이터 개수를 반으로 나누게 하는 값, 자료의 중심을 알려줌
median(diamonds$price)
Mode(diamonds$price)
#range() 함수
range(diamonds$price)  #최솟값 최댓값 순으로 print
#diff() 함수
#diff(c(A,B)), B-A 시행
diff(c(3,12))
#범위를 구해주기 위해선 range()함수와 diff()함수를 혼용해줘야함
diff(range(diamonds$price))
#사분위 범위(IQR: Inter Quartilel Range)
#제3 사분위수 - 제1 사분위 수
IQR(diamonds$price)
#분산(Variance)
var(diamonds$carat)
#표준편차(standard Deviation)
sd(diamonds$price)
#중위수 절대편차(MAD:Median Absolute Deviation)
mad(diamonds$price)
library(corrplot)
cor.result = cor(diamonds[ ,c("x","y","z")])
View(cor.result)
corrplot(cor.result, method="circle")
corrplot(cor.result, method="circle")
corrplot(cor.result, method="square")
corrplot(cor.result, method="ellipse")
getwd()
library(httr)
library(rvest)
library(dplyr)
all.urls = c()
url = 'https://developers.google.com/apis-explorer/?hl=ko#p/'
i = 'https://developers.google.com/apis-explorer/?hl=ko#p/'
html1 = read_html(i)
areaNews1 = html_nodes(html1, 'NYYWNC-h-c')
areaNews1 = html_nodes(html1, 'NYYWNC-h-b')
areaNews1 = html_nodes(html1, 'NYYWNC-c-d')
library(rvest)
setwd('C:/Users/admin/Desktop/Dart/Project/ETF modeling')
data = read.csv('결과분석용.csv', stringsAsFactors = F)
View(data)
library(PerformanceAnalytics)
SharpeRatio(data[,2])
SharpeRatio(data[,2], order.by = time(data[,1]))
xts(data, , order.by = time(data[,1]))
xts(data, , order.by = as.Date(data[,1]))
View(data)
data[-329,]
data[(-328, -329),]
data[(-328 -329),]
data[(-328 : -329),]
data = data[(-328 : -329),]
xts(data, , order.by = as.Date(data[,1]))
timed = xts(data, , order.by = as.Date(data[,1]))
SharpeRatio(timed)
View(timed)
timed[,1]
timed[,-1]
timed[,2]
timed = timed[,2]
SharpeRatio(timed)
View(timed)
is.numeric(timed)
SharpeRatio(timed)
maxDrawdown(timed)
charts.PerformanceSummary(timed)
data = read.csv('결과분석용.csv', stringsAsFactors = F)
data = data[(-328 : -329),]
timed = xts(data, , order.by = as.Date(data[,1]))
View(timed)
timed = timed[,2]
timed[,2] = as.numeric(timed[,2])
View(timed)
charts.PerformanceSummary(timed)
View(data)
rownames(data) = data[,1]
data = data[,2]
data = read.csv('결과분석용.csv', stringsAsFactors = F)
data = data[(-328 : -329),]
nn = data[,1]
data = data[,2]
names(data) = nn
timed = xts(data, , order.by = as.Date(nn))
View(timed)
charts.PerformanceSummary(timed)
charts.PerformanceSummary(timed, geometric = F)
SharpeRatio(timed)
maxDrawdown(timed)
